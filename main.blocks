<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="KcNd}gVS$993a5UA+v8z">running</variable><variable id="f?aje[Wc;okAG1T]eu4R">notRunning</variable><variable id="R}?tVTd.Ee1;lG/m9W]b">currCount</variable><variable id="%!aRT$c|vOrdx2W2E?x9">currentRun</variable><variable id=")XxNyPFZvE)OV,u$*]m@">currentPlace</variable><variable id="y3?Sk/Jy=]%[q1GsfG*Q">ySegment</variable><variable id="cCms,~nWAc~q9ABYr7:-">lastDigit</variable><variable id="DsPRn?CKg_eF|Pds7j{/">pauseDuration</variable></variables><block type="pxt-on-start" id="S`rs;XOd!}~~lHaVZe]N" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="{l[+yM+D8c`edI7uE`o|" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let notRunning: SortingAlgorithm[] = []" numlines="1" declaredvars="notRunning"></mutation><next><block type="typescript_statement" id=".m9P{pjtp!z0Uncqyr-K" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let running: SortingAlgorithm[] = []" numlines="1" declaredvars="running"></mutation><next><block type="typescript_statement" id="Kik4o3rSxwwK4KDnWnPa" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let currentRun = 0" numlines="1" declaredvars="currentRun"></mutation><next><block type="variables_set" id="?aKM;Y(cAIb9JxnkrWXh"><field name="VAR" id="DsPRn?CKg_eF|Pds7j{/">pauseDuration</field><value name="VALUE"><shadow type="math_number" id="If1u6%,aoe$zkFbE^u6V"><field name="NUM">10</field></shadow></value><next><block type="typescript_statement" id="OWE$mW^=mrT(UC]}TD2e" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="interface SortingAlgorithm {" line1="    title: string;" line2="    algorithm: (values: number[]) =&gt; number[];" line3="    a?: number[];" line4="    place?: string;" line5="}" numlines="6"></mutation><next><block type="variables_set" id="|;gPhRt5o%y4sS)pS:.:"><field name="VAR" id="R}?tVTd.Ee1;lG/m9W]b">currCount</field><value name="VALUE"><shadow type="math_number" id="))gkzi/XJWTW7/`S%NJ!"><field name="NUM">26</field></shadow></value><next><block type="typescript_statement" id="oS]Nr%@dppg48h3uj5xr" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let ySegment: number;" numlines="1" declaredvars="ySegment"></mutation><next><block type="typescript_statement" id="yCaR|KikjV9v%%Hk9q0@" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let currentPlace: number;" numlines="1" declaredvars="currentPlace"></mutation><next><block type="typescript_statement" id="^FXR0fYf,TIA?J`|rpDG" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="addExample(&quot;selection sort&quot;, sorts.selectionSort);" numlines="1"></mutation><next><block type="typescript_statement" id="s:P|0AQqryqsQRp[nnwg" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="addExample(&quot;insertion sort&quot;, sorts.insertionSort);" numlines="1"></mutation><next><block type="typescript_statement" id="@-IO(PPH,PTsBV~1[o|_" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="addExample(&quot;bubble sort&quot;, sorts.bubbleSort);" numlines="1"></mutation><next><block type="typescript_statement" id="J!YPeJtqrzCK!#:2gj9x" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="addExample(&quot;shell sort&quot;, sorts.shellSort);" numlines="1"></mutation><next><block type="typescript_statement" id="*qr:o8?_L}m_*kg(;Wsu" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="addExample(&quot;heap sort&quot;, sorts.heapSort);" numlines="1"></mutation><next><block type="typescript_statement" id="fs*~81.jcO@7]yclhqZp" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="addExample(&quot;quick sort&quot;, sorts.quickSort);" numlines="1"></mutation><next><block type="typescript_statement" id="i*Y;7`sBn^Xqqg6G!qE_" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="addExample(&quot;merge sort&quot;, sorts.mergeSort);" numlines="1"></mutation><next><block type="controls_repeat_ext" id="BjkDc]zxQ`8=TkZ1V55O"><comment pinned="false" h="80" w="160">Start off with two random algorithms running</comment><value name="TIMES"><shadow type="math_whole_number" id="@8+n|)Z9I26woNn$YpZ8"><field name="NUM">2</field></shadow></value><statement name="DO"><block type="typescript_statement" id="5H*3%$@k);5C;}rOJLv." editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="moveRandom(notRunning, running);" numlines="1"></mutation></block></statement><next><block type="function_call" id="`iDmAvNTY(fYHzN1*aN0"><mutation name="start" functionid=".3wLV@6~}pg[-9*~ktsL"></mutation><next><block type="typescript_statement" id="O6(lCN)Zb?bPss2o/Vy0" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="game.onPaint(() =&gt; {" line1="    running.forEach(function (value: SortingAlgorithm, index: number) {" line2="        drawCurrentState(value, currCount, ySegment, index * ySegment);" line3="    });" line4="});" numlines="5"></mutation><next><block type="typescript_statement" id=":K:3vBs?y/qI12pw2-4g" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="function moveRandom&lt;T&gt;(a: T[], b: T[]) {" line1="    if (a.length &gt; 0) {" line2="        const j = randint(0, a.length - 1);" line3="        b.push(a.removeAt(j));" line4="    }" line5="}" numlines="6"></mutation><next><block type="typescript_statement" id="mYT|/tlBph^8$ea=qH=I" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="function addExample(title: string, sortAlgorithm: (values: number[]) =&gt; number[]) {" line1="    let output: SortingAlgorithm = {" line2="        title: title," line3="        algorithm: sortAlgorithm" line4="    }" line5="    notRunning.push(output);" line6="}" numlines="7"></mutation><next><block type="typescript_statement" id="D=IWpzl+8~[6AJfkG{b?" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="function fillWithDefault(r: Math.FastRandom, count: number, maxHeight: number): number[] {" line1="    // reset seed so that output is consistent" line2="    r.reset();" line3="    let output2: number[] = [];" line4="" line5="    for (let k = 0; k &lt; count; ++k) {" line6="        output2.push(r.randomRange(0, maxHeight));" line7="    }" line8="" line9="    return output2;" line10="}" numlines="11"></mutation><next><block type="typescript_statement" id="HBVgNY*s|vC9U2aSZ_W;" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="function drawCurrentState(s: SortingAlgorithm, count: number, height: number, yOffset: number) {" line1="    const a = s.a" line2="    const title = s.title;" line3="    const lineWidth = Math.floor(screen.width / count) - 1;" line4="    const borderWidth = (screen.width - (count * (lineWidth + 1))) / 2;" line5="" line6="    for (let l = 0; l &lt; a.length; ++l) {" line7="        if (a[l] &gt; 0) {" line8="            const maxValue = ySegment - (image.font5.charHeight + 2);" line9="            // pick color between 0x1 and 0xE based on value" line10="            let c = Math.clamp(0x1, 0xE, Math.floor(a[l] * 14 / maxValue));" line11="            screen.fillRect(borderWidth + l * (lineWidth + 1), height + yOffset - a[l], lineWidth, a[l], c);" line12="        }" line13="    }" line14="" line15="    screen.print(title, borderWidth, yOffset + 1, 0x2, image.font5);" line16="    if (s.place)" line17="        screen.print(s.place, borderWidth, yOffset + 3 + image.font5.charHeight, 0x2, image.font5);" line18="}" numlines="19"></mutation><next><block type="typescript_statement" id="id^W?)oIN$5(NF#2(u0:" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace sorts {" line1="    function swap(a: number[], i: number, j: number) {" line2="        let tmp = a[i];" line3="        a[i] = a[j];" line4="        a[j] = tmp;" line5="        pause(pauseDuration);" line6="    }" line7="" line8="    function compare(a: number, b: number) {" line9="        pause(pauseDuration)" line10="        return a &lt; b;" line11="    }" line12="" line13="    export function insertionSort(a: number[]) {" line14="        for (let m = 0; m &lt; a.length; m++) {" line15="            let value = a[m]" line16="            let n: number;" line17="            for (n = m - 1; n &gt; -1 &amp;&amp; compare(value, a[n]); --n) {" line18="                a[n + 1] = a[n];" line19="                pause(pauseDuration);" line20="            }" line21="            a[n + 1] = value;" line22="        }" line23="" line24="        return a;" line25="    }" line26="" line27="    export function selectionSort(a: number[]) {" line28="        for (let o = 0; o &lt; a.length; o++) {" line29="            let min = o;" line30="            for (let p = o + 1; p &lt; a.length; p++) {" line31="                if (compare(a[p], a[min])) {" line32="                    min = p;" line33="                    pause(pauseDuration);" line34="                }" line35="            }" line36="            if (o !== min) {" line37="                swap(a, o, min);" line38="            }" line39="        }" line40="" line41="        return a;" line42="    }" line43="" line44="    export function bubbleSort(a: number[]) {" line45="        for (let q = 0; q &lt; a.length; ++q) {" line46="            for (let s = 0; s &lt; q; ++s) {" line47="" line48="                if (compare(a[q], a[s])) {" line49="                    swap(a, q, s);" line50="                }" line51="            }" line52="        }" line53="" line54="        return a;" line55="    }" line56="" line57="    export function shellSort(a: number[]) {" line58="        let increment = a.length / 2;" line59="        while (increment &gt; 0) {" line60="            for (let t = increment; t &lt; a.length; ++t) {" line61="                let u = t;" line62="                let v = a[t];" line63="" line64="                while (u &gt;= increment &amp;&amp; compare(v, a[u - increment])) {" line65="                    a[u] = a[u - increment];" line66="                    u = u - increment;" line67="                    pause(pauseDuration);" line68="                }" line69="                a[u] = v;" line70="            }" line71="" line72="            if (increment == 2) {" line73="                increment = 1;" line74="            } else {" line75="                increment = Math.floor(increment * 5 / 11);" line76="            }" line77="        }" line78="" line79="        return a;" line80="    }" line81="" line82="    export function quickSort(a: number[]) {" line83="        qsort(a, 0, a.length - 1);" line84="        return a;" line85="" line86="        function qsort(a: number[], lo: number, hi: number) {" line87="            if (lo &lt; hi) {" line88="                let w = partition(a, lo, hi);" line89="                qsort(a, lo, w - 1);" line90="                qsort(a, w + 1, hi);" line91="            }" line92="        }" line93="" line94="        function partition(a: number[], lo: number, hi: number) {" line95="            let pivot = a[hi];" line96="            let b = lo - 1;" line97="" line98="            for (let d = lo; compare(d, hi); ++d) {" line99="                if (a[d] &lt; pivot) {" line100="                    b++;" line101="                    swap(a, b, d);" line102="                }" line103="            }" line104="" line105="            swap(a, b + 1, hi);" line106="            return b + 1;" line107="        }" line108="    }" line109="" line110="    export function heapSort(a: number[]) {" line111="        function buildMaxHeap(a: number[]) {" line112="            let e = Math.floor(a.length / 2 - 1);" line113="" line114="            while (e &gt;= 0) {" line115="                heapify(a, e, a.length);" line116="                e -= 1;" line117="            }" line118="        }" line119="" line120="        function heapify(heap: number[], i: number, max: number) {" line121="            while (i &lt; max) {" line122="                const left = 2 * i + 1;" line123="                const right = left + 1;" line124="                let curr = i;" line125="" line126="                if (left &lt; max &amp;&amp; compare(heap[curr], heap[left])) {" line127="                    curr = left;" line128="                }" line129="" line130="                if (right &lt; max &amp;&amp; compare(heap[curr], heap[right])) {" line131="                    curr = right;" line132="                }" line133="" line134="                if (curr == i) return;" line135="" line136="                swap(heap, i, curr);" line137="                i = curr;" line138="            }" line139="        }" line140="        buildMaxHeap(a);" line141="" line142="        for (let f = a.length - 1; f &gt; 0; --f) {" line143="            swap(a, 0, f);" line144="            heapify(a, 0, f);" line145="        }" line146="" line147="        return a;" line148="    }" line149="" line150="    export function mergeSort(a: number[]) {" line151="        // Typically, you wouldn't keep an 'offset' or a link to the 'original' array," line152="        // as the sort works by returning a new, sorted array as output - not by modifying" line153="        // the one passed as input. Here, though, it is needed so that the preview on the" line154="        // screen can be updated" line155="        function msort(a: number[], offset: number, original: number[]): number[] {" line156="            if (a.length &lt; 2) {" line157="                return a;" line158="            }" line159="" line160="            const middle = Math.floor(a.length / 2);" line161="" line162="            let left2 = a.slice(0, middle);" line163="            let right2 = a.slice(middle, a.length);" line164="" line165="            left2 = msort(left2, offset, original);" line166="            right2 = msort(right2, offset + middle, original);" line167="" line168="            const merged = merge(left2, right2);" line169="" line170="            // Update preview on screen" line171="            merged.forEach(function (value: number, index: number) {" line172="                original[offset + index] = value;" line173="                pause(pauseDuration);" line174="            });" line175="" line176="            return merged;" line177="        }" line178="" line179="        function merge(left: number[], right: number[]) {" line180="            let result = [];" line181="            let lIndex = 0;" line182="            let rIndex = 0;" line183="" line184="            while (lIndex &lt; left.length &amp;&amp; rIndex &lt; right.length) {" line185="                if (compare(left[lIndex], right[rIndex])) {" line186="                    result.push(left[lIndex]);" line187="                    ++lIndex;" line188="                } else {" line189="                    result.push(right[rIndex]);" line190="                    ++rIndex;" line191="                }" line192="            }" line193="            while (lIndex &lt; left.length) {" line194="                result.push(left[lIndex]);" line195="                ++lIndex;" line196="            }" line197="            while (rIndex &lt; right.length) {" line198="                result.push(right[rIndex]);" line199="                ++rIndex;" line200="            }" line201="            return result;" line202="        }" line203="" line204="        return msort(a, 0, a);" line205="    }" line206="" line207="    export function isSorted(a: number[]) {" line208="        for (let g = 1; g &lt; a.length; ++g) {" line209="            if (a[g - 1] &gt; a[g]) {" line210="                return false;" line211="            }" line212="        }" line213="        return true;" line214="    };" line215="}" numlines="216"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="keyonevent" id="/|OlP#i(nHi3[KXvEhPt" x="1027" y="0"><field name="button">controller.A</field><field name="event">ControllerButtonEvent.Pressed</field><comment pinned="false" h="80" w="160">start over with a new seed</comment><statement name="HANDLER"><block type="function_call" id="_ApKOem7^VvB(b?aj(ci"><mutation name="start" functionid=".3wLV@6~}pg[-9*~ktsL"></mutation></block></statement></block><block type="keyonevent" id="?$4f[-t#*[n]HW`+hxHZ" x="1358" y="0"><field name="button">controller.left</field><field name="event">ControllerButtonEvent.Pressed</field><comment pinned="false" h="80" w="160">remove a sorting algorithm from the group of running sorts</comment><statement name="HANDLER"><block type="controls_if" id="AOH!2oB3g=d`S)Ks9.+Q"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="t^FB~`/+r##a#tsj^xf]"><field name="OP">GT</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_length" id="-utpU]FB{EVBlQkXIcK1"><value name="VALUE"><block type="variables_get" id="/TsRrI$#XshI^L=z#2zM"><field name="VAR" id="KcNd}gVS$993a5UA+v8z">running</field></block></value></block></value><value name="B"><shadow type="math_number" id="._hsgN]kClGF]kHmS#Az"><field name="NUM">1</field></shadow></value></block></value><statement name="DO0"><block type="typescript_statement" id="`;*1wqZ}eZp#B|RBh`(/" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="moveRandom(running, notRunning)" numlines="1"></mutation><next><block type="function_call" id="-QKS(($Pm@nVC!nuQl!l"><mutation name="start" functionid=".3wLV@6~}pg[-9*~ktsL"></mutation></block></next></block></statement></block></statement></block><block type="keyonevent" id="U~N(o.BTpPSz%@Nue*m|" x="1936" y="0"><field name="button">controller.right</field><field name="event">ControllerButtonEvent.Pressed</field><comment pinned="false" h="80" w="160">display a new sorting algorithm if possible</comment><statement name="HANDLER"><block type="controls_if" id="#!SYJ)%_I]u}]H`;iWW("><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="!|-!/az[.F3X5_]D$Ak."><field name="OP">GT</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_length" id="!`Pq?Y2Z}ZyPa.Zj+o3S"><value name="VALUE"><block type="variables_get" id="X;A~wdb|RZ~Jn|Wfp486"><field name="VAR" id="f?aje[Wc;okAG1T]eu4R">notRunning</field></block></value></block></value><value name="B"><shadow type="math_number" id="|-k;)(^YuH@a1Amv{D6b"><field name="NUM">0</field></shadow></value></block></value><statement name="DO0"><block type="typescript_statement" id="_Bf+Mx|K)LZkUMay._;s" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="moveRandom(notRunning, running)" numlines="1"></mutation><next><block type="function_call" id="1az+$ETL:v$Gxdeq`-v#"><mutation name="start" functionid=".3wLV@6~}pg[-9*~ktsL"></mutation></block></next></block></statement></block></statement></block><block type="keyonevent" id="mQ$VtVw=GJ%PAZ{U$:%F" x="2541" y="0"><field name="button">controller.up</field><field name="event">ControllerButtonEvent.Pressed</field><comment pinned="false" h="80" w="160">increase the number of elements to sort if possible</comment><statement name="HANDLER"><block type="controls_if" id="+Om2@0nQ(jzfaof-Ea;["><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="QMvQssv~cda}@OZ/[:bq"><field name="OP">LT</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic" id="~=_xE:`BFQCRVxz5Q2Ut"><field name="OP">ADD</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="Ss]Enla0Nzk^UmP`+L92"><field name="VAR" id="R}?tVTd.Ee1;lG/m9W]b">currCount</field></block></value><value name="B"><shadow type="math_number" id="tNxPrL~@FaW4Wr1~w-h/"><field name="NUM">6</field></shadow></value></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic" id="-QF1gP5JF@QSmlM_:ZM@"><field name="OP">DIVIDE</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" id="{U7c514Zl/^yxaZjo%fn" editable="false"><field name="EXPRESSION">screen.width</field></block></value><value name="B"><shadow type="math_number" id="xs:S%V2*GNnb$GAf*zrc"><field name="NUM">2</field></shadow></value></block></value></block></value><statement name="DO0"><block type="variables_change" id="LNCwd~z0$oX0kGESq(B["><field name="VAR" id="R}?tVTd.Ee1;lG/m9W]b">currCount</field><value name="VALUE"><shadow type="math_number" id="jAkb/3rh*H[19.M!On~Y"><field name="NUM">6</field></shadow></value><next><block type="function_call" id="tC=9y4ulU0)F+m7*-a54"><mutation name="start" functionid=".3wLV@6~}pg[-9*~ktsL"></mutation></block></next></block></statement></block></statement></block><block type="keyonevent" id="aSCr}v!tO-k@mLmZ11*h" x="3287" y="0"><field name="button">controller.down</field><field name="event">ControllerButtonEvent.Pressed</field><comment pinned="false" h="80" w="160">decrease the number of elements to sort if possible</comment><statement name="HANDLER"><block type="controls_if" id="#}hS(#/:{j?l,Kbd?G*W"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="_lm7RUC(8r](LHQ#6x5X"><field name="OP">GT</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="t{(-xSd9vGf[7EH%~()2"><field name="VAR" id="R}?tVTd.Ee1;lG/m9W]b">currCount</field></block></value><value name="B"><shadow type="math_number" id=";z=|5|WK:jwLe}y%`@S4"><field name="NUM">6</field></shadow></value></block></value><statement name="DO0"><block type="variables_change" id=".m:hAY1Qdj4b[z{LHRA1"><field name="VAR" id="R}?tVTd.Ee1;lG/m9W]b">currCount</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic" id=":NW(G8/hpnQ[cOG#wduN"><field name="OP">MINUS</field><value name="A"><shadow type="math_number" id="u_S9jkwdK.,j%!+2bXDe"><field name="NUM">0</field></shadow></value><value name="B"><shadow type="math_number" id="=;y1kLYTO@JV3D{th8by"><field name="NUM">6</field></shadow></value></block></value><next><block type="function_call" id="91E0@11W#ayTkKLSX_N-"><mutation name="start" functionid=".3wLV@6~}pg[-9*~ktsL"></mutation></block></next></block></statement></block></statement></block><block type="function_definition" id="2)vU/JOL[tvsf8}.nF~," x="3738" y="0"><mutation name="start" functionid=".3wLV@6~}pg[-9*~ktsL"></mutation><field name="function_name">start</field><statement name="STACK"><block type="typescript_statement" id="xg-)bP/fM.lAf~4jR1.," editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const r = new Math.FastRandom();" numlines="1" declaredvars="r"></mutation><next><block type="variables_change" id="FAjN2k|^XQ=PUr6v3{_u"><field name="VAR" id="%!aRT$c|vOrdx2W2E?x9">currentRun</field><value name="VALUE"><shadow type="math_number" id="zn`p+`B}Nrdo*+yqcmyz"><field name="NUM">1</field></shadow></value><next><block type="variables_set" id="=cgGQ*4w8Jg6cryz9!s7"><field name="VAR" id=")XxNyPFZvE)OV,u$*]m@">currentPlace</field><value name="VALUE"><shadow type="math_number" id="Yv`cFHsu-I2lu_q#,XM^"><field name="NUM">1</field></shadow></value><next><block type="variables_set" id="fzVpzg/2#T6e-fWD*al9"><field name="VAR" id="y3?Sk/Jy=]%[q1GsfG*Q">ySegment</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_js_round" id="vnOtNAGvR7hcpXnX*0p$"><field name="OP">floor</field><value name="ARG0"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_arithmetic" id="r)AFX/2$9g^700aw!N%6"><field name="OP">DIVIDE</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression" id="Wu6uuZBj{|$)n:HnH-x]" editable="false"><field name="EXPRESSION">screen.height</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_length" id="@aCz7],c$I}x0;f~3oEv"><value name="VALUE"><block type="variables_get" id="M+*pTE.nQi3uWh4~(4qF"><field name="VAR" id="KcNd}gVS$993a5UA+v8z">running</field></block></value></block></value></block></value></block></value><next><block type="typescript_statement" id="Y}LfqtW@zYG7$4;pTMpS" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="running.forEach(v =&gt; {" line1="        while (v.a &amp;&amp; v.a.length != 0)" line2="            v.a.pop();" line3="    });" numlines="4"></mutation><next><block type="typescript_statement" id="s.tlrCz]@z5.kFR@L%%1" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="running.forEach(v =&gt; v.a = fillWithDefault(r, currCount, ySegment - (image.font5.charHeight + 2)));" numlines="1"></mutation><next><block type="typescript_statement" id="dR%1Sp98_OkwW?oCuYF=" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="running.forEach(v =&gt; control.runInParallel(() =&gt; {" line1="        const run = currentRun;" line2="        v.place = undefined;" line3="        v.algorithm(v.a);" line4="        if (run === currentRun) {" line5="            const place = currentPlace++;" line6="            if (place === 1)" line7="                music.powerUp.play();" line8="            else if (place === running.length)" line9="                music.wawawawaa.play();" line10="" line11="            // ordinal indicator is 'st', 'nd', 'rd', or 'th'" line12="            v.place = place + ordinalIndicator(place);" line13="        }" line14="    }));" numlines="15"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="function_definition" id="MccSuHnNoN=HquK|sGPk" x="4686" y="0"><mutation name="ordinalIndicator" functionid="1|ex0[*VH%uJ_nz+oen0"><arg name="input" id="oeedohmyvz8tzhgfjptzp" type="number"></arg></mutation><field name="function_name">ordinalIndicator</field><statement name="STACK"><block type="variables_set" id="m(7RwH``4r;Nip_Jemlx"><field name="VAR" id="cCms,~nWAc~q9ABYr7:-">lastDigit</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="math_modulo" id="6/VZE?lN6jQz.~We=iPm"><value name="DIVIDEND"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number" id="uuw0=;W}^$Bv7v=X%dPH"><field name="VALUE">input</field></block></value><value name="DIVISOR"><shadow type="math_number" id="mB8):XzkCCtIj/J$D_1h"><field name="NUM">10</field></shadow></value></block></value><next><block type="controls_if" id="b-e8lXtPOAk_E;@/%Jw0"><mutation elseif="2" else="1"></mutation><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="orrKSFRQR()3Ax=g0OaE"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="QhJ=6_qfB0IAMESr4$bp"><field name="VAR" id="cCms,~nWAc~q9ABYr7:-">lastDigit</field></block></value><value name="B"><shadow type="math_number" id="@Ql6`}XT3IQ(})QElL$z"><field name="NUM">1</field></shadow></value></block></value><statement name="DO0"><block type="function_return" id="4,l7ske(k0LLKImOtbj~"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id="IaxvE:bke=DzLBJeWRQG"><field name="TEXT">st</field></block></value></block></statement><value name="IF1"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="*H=:Guxg7fCq{K5z_Oar"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="R9VBX4/-{WiDBv]sEqm0"><field name="VAR" id="cCms,~nWAc~q9ABYr7:-">lastDigit</field></block></value><value name="B"><shadow type="math_number" id="*,o_+.FJ(Hr3WC%p*tpr"><field name="NUM">2</field></shadow></value></block></value><statement name="DO1"><block type="function_return" id="F[I#R8kTqiZ,Q6[hRs@~"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id="no24h@Z3%Il2}%mc@_8,"><field name="TEXT">nd</field></block></value></block></statement><value name="IF2"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare" id="-*-7{6yKz@)KR?]s|rR~"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get" id="?JR~X@Pl8W.*!O[1Ye|_"><field name="VAR" id="cCms,~nWAc~q9ABYr7:-">lastDigit</field></block></value><value name="B"><shadow type="math_number" id="iNh~dTaqkC2S-nJw/89F"><field name="NUM">3</field></shadow></value></block></value><statement name="DO2"><block type="function_return" id="XRy}:pcVNv6%O%IT}N9{"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id="Jdw_ucs)kQo5gc5CwS{%"><field name="TEXT">rd</field></block></value></block></statement><statement name="ELSE"><block type="function_return" id="5o_yNt!Z9]ZU.}#Cf6TI"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text" id="a~6@9{z~SQu{1@gRGF8f"><field name="TEXT">th</field></block></value></block></statement></block></next></block></statement></block></xml>